import LoginError from '@/Component/Error/LoginError'
import Loading from '@/Component/Loading/Loading'
import { userAxios } from '@/Config/Server'
import ContentControl from '@/ContentControl/ContentControl'
import dynamic from 'next/dynamic'
import Head from 'next/head'
import { useRouter } from 'next/router'
import { Fragment, useContext, useState, useEffect } from 'react'
const Footer = dynamic(() => import('@/Component/User/Footer/Footer'))
const Header = dynamic(() => import('@/Component/User/Header/Header'))
const OrdersComp = dynamic(() => import('@/Component/User/Orders/OrdersComp'))

export default function Orders() {
    const { userLogged, setLoginModal, setUserLogged } = useContext(ContentControl)
    const router = useRouter()
    const [logError, setLogError] = useState(false)

    const [loaded, setLoaded] = useState(false)

    const [search, setSearch] = useState('')

    const [Orders, setOrders] = useState([])

    const [total, setTotal] = useState(0)

    useEffect(() => {
        const token = localStorage.getItem('token')
        setLogError(false)
        if (token) {
            userAxios((server) => {
                server.get('/users/getOrders', {
                    params: {
                        search: search,
                        skip: 0
                    }
                }).then((res) => {
                    if (res.data.login) {
                        setUserLogged({ status: false })
                        localStorage.removeItem('token')
                        setLoaded(true)
                        setLogError(true)
                        setLoginModal(loginModal => ({
                            ...loginModal,
                            btn: true,
                            member: true,
                            active: true
                        }))
                    } else {
                        setLoaded(true)
                        setLogError(false)
                        setOrders(res.data.orders)
                        setTotal(res.data.total)
                    }
                }).catch(() => {
                    setLoaded(true)
                    router.push('/error')
                })
            })
        } else {
            setLoaded(true)
            setLogError(true)
            setLoginModal(loginModal => ({
                ...loginModal,
                btn: true,
                member: true,
                active: true
            }))
        }

    }, [userLogged, search])

    return (
        <Fragment>
            <Head>
                <title>Aquariun - Orders</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
            </Head>
            <main>
                {
                    loaded ? (
                        <>
                            <Header />
                            {
                                logError ? <LoginError />
                                    : <OrdersComp
                                        Orders={Orders} setOrders={setOrders}
                                        search={search}
                                        setSearch={setSearch}
                                        total={total}
                                        setTotal={setTotal}
                                        setLogError={setLogError}
                                    />
                            }
                            <Footer />
                        </>
                    ) : <Loading />
                }
            </main>
        </Fragment>
    )
}
