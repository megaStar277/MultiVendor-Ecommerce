import Server from '@/Config/Server'
import ContentControl from '@/ContentControl/ContentControl'
import dynamic from 'next/dynamic'
import Head from 'next/head'
import { useRouter } from 'next/router'
import { Fragment, useContext, useEffect, useState } from 'react'
const Footer = dynamic(() => import('@/Component/User/Footer/Footer'))
const Header = dynamic(() => import('@/Component/User/Header/Header'))
const Result = dynamic(() => import('@/Component/User/Result/ResultComp'))
const QuickView = dynamic(() => import('@/Component/User/QuickView/QuickView'))

export const getServerSideProps = async ({ query }) => {
    try {
        let response = await Server.get(`/users/searchProduct/`, {
            params: {
                search: query.name,
                page: 1,
                sort: { '_id': -1 },
                min: 0,
                max: 10000000,
                category: ''
            }
        })

        return {
            props: {
                res: response.data
            }
        }
    } catch (err) {
        console.log(`Facing An Error ${err}`)
        return {
            redirect: {
                destination: '/404',
                permanent: false,
            },
        }
    }
}

function Search({ res }) {

    let router = useRouter()

    const { QuickVw } = useContext(ContentControl)

    const [products, setProducts] = useState(res.products)
    const [response, setResponse] = useState(res)
    const [pageNum, setPageNum] = useState(1)
    const [filter, setFilter] = useState({
        sort: { '_id': -1 },
        min: 0,
        max: 10000000,
        seCategory: ''
    })

    useEffect(() => {
        async function getData() {
            try {
                let response = await Server.get(`/users/searchProduct/`, {
                    params: {
                        search: router.query.name,
                        page: 1,
                        sort: { '_id': -1 },
                        min: 0,
                        max: 10000000,
                        category: ''
                    }
                })

                setProducts(response.data.products)
                setResponse(response.data)
                setFilter({
                    sort: { '_id': -1 },
                    min: 0,
                    max: 10000000,
                    seCategory: ''
                })
                setPageNum(1)
            } catch (err) {
                console.log(`Facing An Error ${err}`)
            }
        }
        getData()
    }, [router.query.name])

    useEffect(() => {
        async function getData() {
            try {
                let response = await Server.get(`/users/searchProduct/`, {
                    params: {
                        search: router.query.name,
                        page: pageNum,
                        sort: filter.sort,
                        min: filter.min,
                        max: filter.max,
                        category: filter.seCategory
                    }
                })

                setProducts(response.data.products)
                setResponse(response.data)
            } catch (err) {
                console.log(`Facing An Error ${err}`)
            }
        }

        getData()
    }, [filter, pageNum])

    return (
        <Fragment>
            <Head>
                <title>{`Aquariun - Search ${router.query.name}`}</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
            </Head>

            <main>
                <Header />
                {QuickVw.active && <QuickView />}
                <Result
                    setPageNum={setPageNum}
                    products={products}
                    response={response}
                    filter={filter}
                    setFilter={setFilter}
                    setProducts={setProducts}
                    setResponse={setResponse}
                    pageNum={pageNum}
                    category={undefined}
                    search={router.query.name}
                />
                <Footer />
            </main>
        </Fragment>
    )
}

export default Search